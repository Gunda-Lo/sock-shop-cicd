pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
        GIT_USER_EMAIL = "segeboi@gmail.com"
        GIT_USER_NAME = "Gunda-Lo"
        GIT_REPO_NAME = "sock-shop-cicd"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Pull and Scan Images') {
            steps {
                script {
                    // Define desired tags for images
                    def desiredTags = [
                        '0.4.8', '0.3.5', '0.3.12', '0.4.7',
                        '0.4.3', '0.3.1', '0.4.8', '0.4.7'
                    ]

                    // Define image names
                    def imageNames = [
                        'weaveworksdemos/carts', 'weaveworksdemos/catalogue',
                        'weaveworksdemos/front-end', 'weaveworksdemos/orders',
                        'weaveworksdemos/payment', 'weaveworksdemos/queue-master',
                        'weaveworksdemos/shipping', 'weaveworksdemos/user'
                    ]

                    // Pull and scan each image
                    for (int i = 0; i < desiredTags.size(); i++) {
                        def desiredTag = desiredTags[i]
                        def imageName = imageNames[i]

                        // Pull the Docker image
                        sh "docker pull ${imageName}:${desiredTag}"
                    
                        // Scan the pulled Docker image with Trivy
                        sh "trivy image ${imageName}:${desiredTag} > trivyimage.txt"
                    }
                }
            }
        }

        stage('Checkout, Code, and Push Changes') {
            steps {
                script {
                    // Checkout the repository
                    git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Gunda-Lo/sock-shop-cicd.git'

                    // Create desired images folder
                    sh 'mkdir -p socks-shop-eks-deployment/desired_images'

                    // Populate the folder with expected image names
                    def filePatterns = [
                        'carts': '0.4.8', 'catalogue': '0.3.5', 'front-end': '0.3.12',
                        'orders': '0.4.7', 'payment': '0.4.3', 'queue-master': '0.3.1',
                        'shipping': '0.4.8', 'users': '0.4.7'
                    ]
                    filePatterns.each { appName, desiredTag ->
                        sh "echo 'weaveworksdemos/${appName}:${desiredTag}' > socks-shop-eks-deployment/desired_images/${appName}_image.txt"
                    }

                    // Change into the terraform directory and run commands
                    dir ('socks-shop-eks-deployment/terraform') {
                        sh """
                            terraform init
                            terraform apply --auto-approve \
                            -var='private_subnets_cidr_blocks=[\"100.0.1.0/24\", \"100.0.2.0/24\", \"100.0.3.0/24\"]' \
                            -var='public_subnets_cidr_blocks=[\"100.0.101.0/24\", \"100.0.102.0/24\", \"100.0.103.0/24\"]' \
                            -var='vpc_cidr_block=\"100.0.0.0/16\"' \
                            -var='cluster_name=\"sock-shop-eks-cluster\"'
                        """
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Configure the terminal to run commands
                    sh "aws eks update-kubeconfig --name sock-shop-eks-cluster"
                }
            }
        }
    }
}

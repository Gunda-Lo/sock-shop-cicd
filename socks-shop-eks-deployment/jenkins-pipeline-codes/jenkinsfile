pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
        GIT_USER_EMAIL = "segeboi@gmail.com"
        GIT_USER_NAME = "Gunda-Lo"
        GIT_REPO_NAME = "sock-shop-cicd"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Pull and Scan Images') {
            steps {
                script {
                    // Define desired tags for images
                    def desiredTags = [
                        '0.4.8', '0.3.5', '0.3.12', '0.4.7',
                        '0.4.3', '0.3.1', '0.4.8', '0.4.7'
                    ]

                    // Define image names
                    def imageNames = [
                        'weaveworksdemos/carts', 'weaveworksdemos/catalogue',
                        'weaveworksdemos/front-end', 'weaveworksdemos/orders',
                        'weaveworksdemos/payment', 'weaveworksdemos/queue-master',
                        'weaveworksdemos/shipping', 'weaveworksdemos/user'
                    ]

                    // Pull and scan each image
                    for (int i = 0; i < desiredTags.size(); i++) {
                        def desiredTag = desiredTags[i]
                        def imageName = imageNames[i]

                        // Pull the Docker image
                        sh "docker pull ${imageName}:${desiredTag}"
                    
                        // Scan the pulled Docker image with Trivy
                        sh "trivy image ${imageName}:${desiredTag} > trivyimage.txt"
                    }
                }
            }
        }

        stage('Checkout, Code, and Push Changes') {
            steps {
                script {
                    // Checkout the repository
                    git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/Gunda-Lo/sock-shop-cicd.git'

                    // Create desired images folder
                    sh 'mkdir -p socks-shop-eks-deployment/desired_images'

                    // Populate the folder with expected image names
                    filePatterns.each { appName, desiredTag ->
                        sh "echo 'weaveworksdemos/${appName}:${desiredTag}' > socks-shop-eks-deployment/desired_images/${appName}_image.txt"
                    }

                    // Commit and push changes
                    sh '''
                        cd socks-shop-eks-deployment
                        git config user.email "segeboi@gmail.com"
                        git config user.name "Gunda-Lo"
                        git add desired_images
                        git commit -m "Update desired images"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }

        stage('Create EKS cluster') {
            steps {
                script {
                    // Change into the terraform directory and run commands
                    dir ('../terraform') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Configure the terminal to run commands
                    sh "aws eks update-kubeconfig --name sock-shop-eks-cluster"
                }
            }
        }
    }
}

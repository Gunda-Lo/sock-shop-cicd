pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Pull and Scan Images') {
            steps {
                script {
                    // Define desired tags for images
                    def desiredTags = [
                        '0.4.8', '0.3.5', '0.3.12', '0.4.7',
                        '0.4.3', '0.3.1', '0.4.8', '0.4.7'
                    ]

                    // Define image names
                    def imageNames = [
                        'weaveworks/demos/carts', 'weaveworks/demos/catalogue',
                        'weaveworks/demos/front-end', 'weaveworks/demos/orders',
                        'weaveworks/demos/payment', 'weaveworks/demos/queue-master',
                        'weaveworks/demos/shipping', 'weaveworks/demos/user'
                    ]

                    // Pull and scan each image
                    for (int i = 0; i < desiredTags.size(); i++) {
                        def desiredTag = desiredTags[i]
                        def imageName = imageNames[i]

                        // Pull the Docker image
                        sh "docker pull ${imageName}:${desiredTag}"
                    
                        // Scan the pulled Docker image with Trivy
                        sh "trivy image ${imageName}:${desiredTag} > trivy_scan_report_${imageName}_${desiredTag}.txt"
                    }
                }
            }
        }
        stage('Checkout and Verify Tags') {
            steps {
                script {
                    // Checkout the repository
                    git credentialsId: 'GITHUB', url: 'https://github.com/Gunda-Lo/sock-shop-cicd.git'

                    // Define deployment file patterns and desired tags
                    def filePatterns = [
                        'carts': '0.4.8', 'catalogue': '0.3.5', 'front-end': '0.3.12',
                        'orders': '0.4.7', 'payment': '0.4.3', 'queue-master': '0.3.1',
                        'shipping': '0.4.8', 'users': '0.4.7'
                    ]

                    // Iterate through each deployment file pattern and desired tag
                    filePatterns.each { appName, desiredTag ->
                        // Read the deployment file and extract the tag
                        def deploymentFile = sh(
                            returnStdout: true,
                            script: "cat *-${appName}-dep.yaml"
                        ).trim()
                        def tagPattern = /image:\s+weaveworks\/demos\/${appName}:(\S+)/
                        def match = deploymentFile =~ tagPattern

                        // Confirm the tag
                        if (match) {
                            def actualTag = match[0][1]
                            if (actualTag != desiredTag) {
                                error "Tag mismatch: Expected tag ${desiredTag}, but found ${actualTag} in deployment file"
                            } else {
                                echo "Tag verified for ${appName}"
                            }
                        } else {
                            error "Failed to find image tag in deployment file"
                        }
                    }
                }
            }
        }
        stage('Create EKS cluster') {
            steps {
                script {
                    // Change into the terraform directory and run commands
                    dir ('../terraform') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                    }
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                script {
                    // Configure the terminal to run commands
                    sh "aws eks update-kubeconfig --name sock-shop-eks-cluster"
                }
            }
        }
    }
}
